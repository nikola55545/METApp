{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { WebView } from \"react-native-webview\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar screenWidth = Dimensions.get(\"window\").width;\nvar screenHeight = Dimensions.get(\"window\").height;\n\nvar Zimbra = function (_Component) {\n  _inherits(Zimbra, _Component);\n\n  var _super = _createSuper(Zimbra);\n\n  function Zimbra() {\n    var _this;\n\n    _classCallCheck(this, Zimbra);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      refreshing: false\n    };\n    return _this;\n  }\n\n  _createClass(Zimbra, [{\n    key: \"_onRefresh\",\n    value: function _onRefresh() {\n      var _this2 = this;\n\n      this.setState({\n        refreshing: true\n      });\n      setTimeout(function () {\n        _this2.setState({\n          refreshing: false\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: {\n          flex: 1,\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: [_jsx(StatusBar, {\n          style: \"light\"\n        }), _jsx(ScrollView, {\n          refreshControl: _jsx(RefreshControl, {\n            refreshing: this.state.refreshing,\n            onRefresh: this._onRefresh.bind(this)\n          }),\n          children: _jsx(WebView, {\n            source: {\n              uri: \"https://mail.metropolitan.ac.rs/\"\n            },\n            style: {\n              width: screenWidth,\n              height: screenHeight\n            }\n          })\n        })]\n      });\n    }\n  }]);\n\n  return Zimbra;\n}(Component);\n\nexport { Zimbra as default };\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["C:/Users/nikol/Desktop/MetApp/MetApp/components/Zimbra.js"],"names":["StatusBar","React","Component","useEffect","useState","NavigationContainer","createNativeStackNavigator","createStackNavigator","WebView","screenWidth","Dimensions","get","width","screenHeight","height","Zimbra","state","refreshing","setState","setTimeout","flex","alignItems","justifyContent","_onRefresh","bind","uri","styles","StyleSheet","create"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;;;;;;;;AAYA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,OAAT,QAAwB,sBAAxB;;;AAEA,IAAIC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA3C;AACA,IAAIC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA5C;;IAEqBC,M;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE;AADN,K;;;;;;WAIR,sBAAa;AAAA;;AACX,WAAKC,QAAL,CAAc;AAAED,QAAAA,UAAU,EAAE;AAAd,OAAd;AAGAE,MAAAA,UAAU,CAAC,YAAM;AACf,QAAA,MAAI,CAACD,QAAL,CAAc;AAAED,UAAAA,UAAU,EAAE;AAAd,SAAd;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;;;WAED,kBAAS;AACP,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEG,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,UAAU,EAAE,QAAvB;AAAiCC,UAAAA,cAAc,EAAE;AAAjD,SAAb;AAAA,mBACE,KAAC,SAAD;AAAW,UAAA,KAAK,EAAC;AAAjB,UADF,EAEE,KAAC,UAAD;AAAY,UAAA,cAAc,EAAE,KAAC,cAAD;AAAgB,YAAA,UAAU,EAAE,KAAKN,KAAL,CAAWC,UAAvC;AAAmD,YAAA,SAAS,EAAE,KAAKM,UAAL,CAAgBC,IAAhB,CAAqB,IAArB;AAA9D,YAA5B;AAAA,oBAEE,KAAC,OAAD;AACE,YAAA,MAAM,EAAE;AACNC,cAAAA,GAAG,EAAE;AADC,aADV;AAIE,YAAA,KAAK,EAAE;AAAEb,cAAAA,KAAK,EAAEH,WAAT;AAAsBK,cAAAA,MAAM,EAAED;AAA9B;AAJT;AAFF,UAFF;AAAA,QADF;AAeD;;;;EA9BiCX,S;;SAAfa,M;AAgCrB,IAAMW,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Button,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  LogBox,\r\n  RefreshControl,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport React, { Component, useEffect, useState } from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { WebView } from \"react-native-webview\";\r\n\r\nvar screenWidth = Dimensions.get(\"window\").width;\r\nvar screenHeight = Dimensions.get(\"window\").height;\r\n\r\nexport default class Zimbra extends Component {\r\n  state = {\r\n    refreshing: false,\r\n  };\r\n\r\n  _onRefresh() {\r\n    this.setState({ refreshing: true });\r\n\r\n    // Neki kod pa then this.setState({refreshing: false});\r\n    setTimeout(() => {\r\n      this.setState({ refreshing: false });\r\n    }, 1000)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <StatusBar style=\"light\" />\r\n        <ScrollView refreshControl={<RefreshControl refreshing={this.state.refreshing} onRefresh={this._onRefresh.bind(this)} />\r\n        }>\r\n          <WebView\r\n            source={{\r\n              uri: \"https://mail.metropolitan.ac.rs/\",\r\n            }}\r\n            style={{ width: screenWidth, height: screenHeight }}\r\n          />\r\n        </ScrollView>\r\n      </View>\r\n\r\n    );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({});\r\n"]},"metadata":{},"sourceType":"module"}